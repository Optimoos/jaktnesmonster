import sdl { SDL, SDL_GetTicks64, SDL_PixelFormat, SDL_PixelType, SDL_PackedOrder, SDL_PackedLayout, SDL_Color }
import sdl_ttf { SDL_ttf, RenderMethod }
import video { draw_frame }
import system { System }
import cpu { CPU }
import debugger { Debugger }
import joypad { Joypad }

struct Stats {
    frame_time: u64
}

fn main(args: [String]) -> c_int {
    guard args.size() > 1 else {
        eprintln("usage: jakt_nes <rom file>")
        return 1
    }

    let filename = args[1]

    mut system = System::init(filename)

    match system {
        Success(sys) => {
            mut sdl = SDL::construct()
            defer {
                sdl.quit()
            }

            mut sdl_ttf = SDL_ttf::construct()
            defer {
                sdl_ttf.quit()
            }

            mut system = sys
            mut cpu = CPU::init(system)
            mut debugger = Debugger::init(cpu)
            mut joypad = system.joypad
            mut ppu = system.ppu
            mut clock_pause: bool = false
            mut one_frame: bool = false
            mut slow_mode: bool = false
            mut stats: Stats = Stats(frame_time: 0u64)
            eprintln("Debugging keys\n--------------")
            eprintln("D - hold to dump current CPU info\nH - toggle CPU halt\nJ - When halted, run single frame\nL - toggle slow mode")

            if system.cart.region is NTSC {
                sdl.init_video(width: 256 * 2, height: 224 * 2)
            } else {
                sdl.init_video(width: 256 * 2, height: 240 * 2)
            }
            sdl.init_audio()
            sdl.enable_audio()
            sdl.get_controller()

            sdl_ttf.init(font_file: "VT323-Regular.ttf", font_size: 24)
            sdl_ttf.text = format("FT: {}", stats.frame_time)
            sdl.text_surface = sdl_ttf.render_text_to_surface()
            sdl_ttf.set_outline(outline: 1)
            sdl_ttf.render_method = RenderMethod::Blended
            sdl_ttf.fore_color = SDL_Color(0,0,0,0)
            sdl.outline_surface = sdl_ttf.render_text_to_surface()

            mut event = sdl.poll_event()
            loop {
                if event.has_value() {
                    match event! {
                        Quit => {
                            break
                        }
                        KeyDown(key) => {
                            match key {
                                Up => {
                                    joypad.press_up()
                                }
                                Down => {
                                    joypad.press_down()
                                }
                                Left => {
                                    joypad.press_left()
                                }
                                Right => {
                                    joypad.press_right()
                                }
                                Return => {
                                    joypad.press_start()
                                }
                                Tab => {
                                    joypad.press_select()
                                }
                                Z => {
                                    joypad.press_a()
                                }
                                X => {
                                    joypad.press_b()
                                }
                                D => {
                                    system.debug_enable()
                                }
                                H => {}
                                J => {}
                                L => {}
                            }
                        }
                        KeyUp(key) => {
                            match key {
                                Up => {
                                    joypad.release_up()
                                }
                                Down => {
                                    joypad.release_down()
                                }
                                Left => {
                                    joypad.release_left()
                                }
                                Right => {
                                    joypad.release_right()
                                }
                                Return => {
                                    joypad.release_start()
                                }
                                Tab => {
                                    joypad.release_select()
                                }
                                Z => {
                                    joypad.release_a()
                                }
                                X => {
                                    joypad.release_b()
                                }
                                D => {
                                    system.debug_disable()
                                }
                                H => {
                                    clock_pause = not clock_pause
                                    eprintln("Clock pause: {}", clock_pause)
                                }
                                J => {
                                    if clock_pause {
                                        one_frame = true
                                        eprintln("Executing single frame")
                                    }
                                }
                                L => {
                                    slow_mode = not slow_mode
                                    eprintln("Slow clock mode: {}", slow_mode)
                                }
                            }
                        }
                        ButtonDown(button) => {
                            match button {
                                Up => {
                                    joypad.press_up()
                                }
                                Down => {
                                    joypad.press_down()
                                }
                                Left => {
                                    joypad.press_left()
                                }
                                Right => {
                                    joypad.press_right()
                                }
                                Start => {
                                    joypad.press_start()
                                }
                                Select => {
                                    joypad.press_select()
                                }
                                A => {
                                    joypad.press_a()
                                }
                                B => {
                                    joypad.press_b()
                                }
                            }
                        }
                        ButtonUp(button) => {
                            match button {
                                Up => {
                                    joypad.release_up()
                                }
                                Down => {
                                    joypad.release_down()
                                }
                                Left => {
                                    joypad.release_left()
                                }
                                Right => {
                                    joypad.release_right()
                                }
                                Start => {
                                    joypad.release_start()
                                }
                                Select => {
                                    joypad.release_select()
                                }
                                A => {
                                    joypad.release_a()
                                }
                                B => {
                                    joypad.release_b()
                                }
                            }
                        }
                    }
                }
                event = None

                if one_frame {
                    if clocktick(system, cpu, debugger, sdl, &mut stats) {
                        event = sdl.poll_event()
                    }
                    one_frame = false
                }
                if slow_mode and not clock_pause {
                    if clocktick(system, cpu, debugger, sdl, &mut stats) {
                        event = sdl.poll_event()
                    }
                    sdl.delay(1u32)
                }
                if not clock_pause and not slow_mode {
                    if clocktick(system, cpu, debugger, sdl, &mut stats) {
                        event = sdl.poll_event()
                        sdl_ttf.text = format("FT: {}", stats.frame_time)
                        sdl_ttf.fore_color = SDL_Color(255,255,255,0)
                        sdl_ttf.set_outline(outline: 0)
                        sdl.text_surface = sdl_ttf.render_text_to_surface()
                        sdl_ttf.set_outline(outline: 1)
                        sdl_ttf.fore_color = SDL_Color(0,0,0,0)
                        sdl.outline_surface = sdl_ttf.render_text_to_surface()
                    }
                } else {
                    event = sdl.poll_event()
                }
            }
        }
        Error(msg) => {
            eprintln("Error: {}", msg)
            return 2
        }
    }

    return 0
}

fn clocktick(mut system: System, mut cpu: CPU, mut debugger: Debugger, mut sdl: SDL, stats: &mut Stats) throws -> bool {
    let in_vblank_before = system.ppu.in_vblank
    mut next_frame = false

    let cpu_clocks_before = cpu.clock
    cpu.run_opcode()
    let cpu_clocks_after = cpu.clock

    if system.debug {
        debugger.dump_cpu_state()
    }

    system.ppu.tick(cycles: (cpu_clocks_after - cpu_clocks_before) * 3)
    system.apu.tick(cycles: (cpu_clocks_after - cpu_clocks_before) as! u16 * 2)
    let in_vblank_after = system.ppu.in_vblank

    if not in_vblank_before and in_vblank_after {
        // We're just now in the vblank
        draw_frame(sdl, buffer: system.ppu.video_buffer, region: system.cart.region)
        next_frame = true

        system.apu.render()
        // println("{}", system.apu.buffer)
        sdl.queue_audio(data: system.apu.buffer)

        // Finally, let's burn some time so that we're at 60fps
        let delta = sdl.delta_time()
        let ms_per_frame = 1000u64 / 60u64
        stats.frame_time = delta

        if delta < ms_per_frame {
            sdl.delay(ms: (ms_per_frame - delta) as! u32)
            sdl.delta_time()
        }
    }

    if not in_vblank_before and in_vblank_after and system.ppu.nmi_on_vblank {
        // println("==NMI==")
        cpu.nmi()
    }

    if system.ppu.mmc3_irq_flag {
        cpu.irq()
        system.ppu.mmc3_irq_flag = false // FIXME: Should we reset CPU IRQ flag here?
    }

    return next_frame
}
