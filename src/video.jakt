import sdl { SDL,  null, SDL_BlendMode, SDL_Rect }
import ppu { RGB }
import cart { Region }

fn draw_frame(sdl: SDL, mut buffer: [u32], region: Region) throws {

    mut format = 0u32
    mut access: c_int = 0
    let (start_y, scanlines) = match region {
        NTSC => (8, 224) // NTSC does not display the top and bottom 8 scanlines of the framebuffer
        PAL => (0, 240)
        else => {abort()}
    }

    mut surface = sdl.surface
    mut buf_addr: raw void = null()
    unsafe {
        cpp {
            "buf_addr =  buffer.unsafe_data()+(256*start_y);"
        }
    }
    mut source = sdl.create_rgb_surface_from(pixels: buf_addr, 
                                             width: 256, 
                                             height: scanlines as! c_int, 
                                             depth: 32, 
                                             pitch: (256*4) as! c_int, 
                                             Rmask: 0x000000ff, 
                                             Gmask: 0x0000ff00, 
                                             Bmask: 0x00ff0000, 
                                             Amask: 0
                                            )

    sdl.blit_scaled(source, srcrect: null(), dest: surface, destrect: null())

    let text_rect = SDL_Rect(10, 400, 0, 0)
    
    sdl.blit_surface(source: sdl.outline_surface, srcrect: null(), dest: surface, destrect: &raw text_rect)
    sdl.blit_surface(source: sdl.text_surface, srcrect: null(), dest: surface, destrect: &raw text_rect)
    sdl.update_window_surface()

}

